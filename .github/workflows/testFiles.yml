name: Test Files

on:
  pull_request:
    paths:
      - "**/docker-compose.yml"
      - "**/umbrel-app.yml"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get changed files
        id: files
        uses: Ana06/get-changed-files@v2.2.0

      - name: Run docker-compose checks
        id: docker_compose_checks
        run: |
          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ $changed_file == *docker-compose.yml ]]
            then
              echo "Running docker-compose checks on $changed_file"
              grep 'image:' $changed_file | while read -r line ; do
                IMAGE=$(echo $line | cut -d' ' -f2)
                ARCHITECTURES=$(docker run --rm mplatform/mquery:v0.5.0@sha256:d0989420b6f0d2b929fd9355f15c767f62d0e9a72cdf999d1eb16e6073782c71 $IMAGE | grep -E 'linux/amd64|linux/arm64')
                if [[ ! $ARCHITECTURES =~ "linux/amd64" ]] || [[ ! $ARCHITECTURES =~ "linux/arm" ]]; then
                  echo "::error::Image $IMAGE does not support both linux/amd64 and linux/arm architectures"
                  imageError=$(echo Image $IMAGE does not support both linux/amd64 and linux/arm architectures)
                  echo "IMAGE_ERROR=$imageError" >> $GITHUB_OUTPUT
                fi
              done
              if grep -q ':latest' $changed_file ; then
                echo "::error::Some images use the latest tag"
                latestTagError=$(echo Some images use the latest tag)
                echo "LATEST_TAG_ERROR=$latestTagError" >> $GITHUB_OUTPUT
              fi
              if grep -q 'PROXY_AUTH_ADD: "true"' $changed_file ; then
                echo "::error::PROXY_AUTH_ADD is set to true"
                proxyAuthError=$(echo PROXY_AUTH_ADD is set to true)
                echo "PROXY_AUTH_ERROR=$proxyAuthError" >> $GITHUB_OUTPUT
              fi
            fi
          done
        shell: bash

      - name: Run umbrel app checks
        id: umbrel_app_checks
        run: |
          for changed_file in ${{ steps.files.outputs.all }}; do
            if [[ $changed_file == *umbrel-app.yml ]]
            then
              echo "Running umbrel app checks on $changed_file"
              REQUIRED_FIELDS=("manifestVersion" "id" "category" "name" "version" "tagline" "description" "developer" "website" "dependencies" "support" "port" "gallery")
              missingFields=""
              for FIELD in "${REQUIRED_FIELDS[@]}"; do
                if ! grep -q "^$FIELD:" $changed_file ; then
                  echo "::error::Required field $FIELD is missing"
                  missingFields+="<code>$FIELD</code>, "
                fi
              done
              echo $missingFields
              if [[ $missingFields != "" ]]; then
                echo "REQUIRED_FIELD_ERROR=$missingFields : required fields missing in umbrel-app.yml" >> $GITHUB_OUTPUT
              fi

              CATEGORY=$(grep 'category:' $changed_file | cut -d':' -f2 | tr -d '[:space:]')
              if [[ $CATEGORY != $(echo "$CATEGORY" | tr '[:upper:]' '[:lower:]') ]]; then
                echo "::error::Category value is not lowercase"
                categoryError=$(echo Category value is not lowercase)
                echo "CATEGORY_ERROR=$categoryError" >> $GITHUB_OUTPUT
              fi

              OPTIONAL_FIELDS=("submission" "submitter" "defaultPassword" "defaultUsername" "repo")
              optionalFieldsMissing=""
              for FIELD in "${OPTIONAL_FIELDS[@]}"; do
                if ! grep -q "$FIELD:" $changed_file ; then
                  echo "::warning::$FIELD is an optional field and is missing"
                  optionalFieldsMissing+="<code>$FIELD</code>, "
                fi
              done
              echo $optionalFieldsMissing
              if [[ $optionalFieldsMissing != "" ]]; then
                echo "OPTIONAL_FIELD_WARNING=$optionalFieldsMissing : optional fields missing in umbrel-app.yml" >> $GITHUB_OUTPUT
              fi
              echo "$changed_file -> All umbrel app checks passed"
            fi
          done
        shell: bash

      - name: Auto Comment
        uses: actions/github-script@v6
        with:
          script: |
            const dockerComposeChecks = JSON.parse(process.env.GITHUB_OUTPUT_DOCKER_COMPOSE_CHECKS);
            const umbrelAppChecks = JSON.parse(process.env.GITHUB_OUTPUT_UMBREL_APP_CHECKS);

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'if there are any errors or warnings they will be listed below:' +
                '\n\n### `docker-compose.yml`' +
                (dockerComposeChecks.IMAGE_ERROR !== '' ? '\n- üõë ' : '\n- ‚úÖ No image errors') + dockerComposeChecks.IMAGE_ERROR +
                (dockerComposeChecks.LATEST_TAG_ERROR !== '' ? '\n- üõë ' : '\n- ‚úÖ No latest tag errors') + dockerComposeChecks.LATEST_TAG_ERROR +
                (dockerComposeChecks.PROXY_AUTH_ERROR !== '' ? '\n- üõë ' : '\n- ‚úÖ No proxy auth errors') + dockerComposeChecks.PROXY_AUTH_ERROR +
                '\n\n### `umbrel-app.yml`' +
                (umbrelAppChecks.REQUIRED_FIELD_ERROR !== '' ? '\n- üõë ' : '\n- ‚úÖ All required fields present') + umbrelAppChecks.REQUIRED_FIELD_ERROR +
                (umbrelAppChecks.CATEGORY_ERROR !== '' ? '\n- üõë ' : '\n- ‚úÖ Category value is lowercase') + umbrelAppChecks.CATEGORY_ERROR +
                (umbrelAppChecks.OPTIONAL_FIELD_WARNING !== '' ? '\n- ‚ö†Ô∏è ' : '\n- ‚úÖ All optional fields present') + umbrelAppChecks.OPTIONAL_FIELD_WARNING
            })
